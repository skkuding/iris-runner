name: CD - Production

on:
  push:
  workflow_dispatch:

jobs:
  build-image:
    name: Build image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [
          {dir: './backend', name: 'backend'},
          {dir: './frontend', name: 'frontend'},
          {dir: './k8s/pod-manager', name: 'pod-manager'}
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.target.dir }}
          push: true
          tags: ghcr.io/skkuding/iris-runner-${{ matrix.target.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: self-hosted
    needs: [build-image]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy Frontend
        run: |
          eval $(minikube docker-env -u)
          docker rm -f iris-runner-frontend || true
          docker pull ghcr.io/skkuding/iris-runner-frontend:latest
          docker run -d --name iris-runner-frontend \ 
            -p 80:80 \ 
            ghcr.io/skkuding/iris-runner-frontend:latest

      - name: Verify Minikube status
        run: |
          status_output=$(minikube status)
          if ! echo "$status_output" | grep -q "host: Running" || \
            ! echo "$status_output" | grep -q "kubelet: Running" || \
            ! echo "$status_output" | grep -q "apiserver: Running"; then
            echo "Minikube is not fully operational"
            echo "Current status:"
            echo "$status_output"
            exit 1
          fi

      - name: Pull images in Minikube Cluster
        run: |
          eval $(minikube docker-env)
          docker pull ghcr.io/skkuding/iris-runner-backend:latest
          docker pull ghcr.io/skkuding/iris-runner-pod-manager:latest

      - name: Deploy RBAC
        run: |
          kubectl apply -f k8s/rbac.yml

      - name: Deploy Pod Manager
        run: kubectl apply -f k8s/iris-runner-pod-manager.yml

      - name: Configure Ingress
        run: kubectl apply -f k8s/ingress.yml